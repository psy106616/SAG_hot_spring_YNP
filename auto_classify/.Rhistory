sag_spe = data.frame(sag_id = substr(sag_spe_raw$SAG, 8, 10), spe = sag_spe_raw$Species.classification)
roworder = as.character(read.table("../fig2_row_order_based_on_phylo.txt", header=F, sep=",")[, 1])
spe_ordered = ordered(sag_spe[, 2], levels = roworder)
sag_spe_ordered = sag_spe[order(spe_ordered), ]
sag_vp_inf_m = read.table("../matrix_infection.csv", header = T, sep = ",")
sag_vp_crispr_m = read.table("../matrix_crispr.csv", header = T, sep = ",")
#######
# sort columns
sortCols = function(data){
data[, order(colSums(data), decreasing = T)]
}
sortRows <- function(data){
order_string = paste("data[order(", paste(paste0("data[,", 1:ncol(data), "]"), collapse=","), ", decreasing = T), ]", collapse = "", sep = "")
data = eval(parse(text = order_string))
}
sortAllRows <- function(data_m, row_spe){
ordered_m = NULL
for(i in unique(row_spe[, 2])){
#print(i)
i_idx = which(row_spe[, 2] == i)
if(length(i_idx) > 1){
ordered_m = rbind(ordered_m, sortRows(data_m[i_idx, ]))
}else{
rname = rownames(ordered_m)
ordered_m = rbind(ordered_m, data_m[i_idx, ])
rownames(ordered_m) = c(rname, rownames(data_m)[i_idx])
}
}
return(ordered_m)
}
sortAllRows_order_by_heatmap_cnt <- function(data_m, row_spe){
ordered_m = NULL
for(i in names(sort(table(row_spe[,2]), decreasing=T))){
#print(i)
i_idx = which(row_spe[, 2] == i)
if(length(i_idx) > 1){
ordered_m = rbind(ordered_m, sortRows(data_m[i_idx, ]))
}else{
rname = rownames(ordered_m)
ordered_m = rbind(ordered_m, data_m[i_idx, ])
rownames(ordered_m) = c(rname, rownames(data_m)[i_idx])
}
}
return(ordered_m)
}
####################################### reads only #######################################
sag_vp_reads_m = sag_vp_inf_m
rownames(sag_vp_reads_m) = substr(sag_vp_reads_m[, 1], 8, 10)
sag_vp_reads_m = sag_vp_reads_m[, -1]
sag_vp_reads_m = ifelse(sag_vp_reads_m>0, 1, 0)
sag_vp_reads_m[is.na(sag_vp_reads_m)] = 0
sag_spe_ordered_sub_reads = sag_spe_ordered[which(sag_spe_ordered$sag_id %in% row.names(sag_vp_reads_m)),]
sag_vp_reads_m = sag_vp_reads_m[sag_spe_ordered_sub_reads$sag_id, ]
#write.csv(sag_spe_ordered_sub_reads, file="fig2_row_order_auto_classify.csv", row.names = F, quote = F)
#sag_spe_ordered_new_order = sag_spe_ordered
#sag_spe_ordered_sub_reads_new_order = sag_spe_ordered[which(sag_spe_ordered$sag_id %in% row.names(sag_vp_reads_m)), ]
#sag_vp_reads_m_new_order = sag_vp_reads_m[sag_spe_ordered_sub_reads_new_order$sag_id, ]
np_reads_sag_reads_colsorted = sortCols(sag_vp_reads_m)
colnames(np_reads_sag_reads_colsorted) = gsub("X", "", colnames(np_reads_sag_reads_colsorted))
sub_sag_spe_ordered = sag_spe_ordered[which(sag_spe_ordered[, 1] %in% rownames(np_reads_sag_reads_colsorted)), ]
np_reads_sag_reads_colsorted = sortAllRows(np_reads_sag_reads_colsorted, sub_sag_spe_ordered)
np_reads_sag_reads_colsorted_no_unk = np_reads_sag_reads_colsorted
sag_spe_ordered_no_unk = sag_spe_ordered[which(sag_spe_ordered$spe != "Unknown"), ]
matrix_sag_order = rownames(np_reads_sag_reads_colsorted_no_unk)
nature_order = sag_spe_ordered_no_unk[, 1]
common_sags = intersect(matrix_sag_order, nature_order)
leftout_sags = setdiff(nature_order, common_sags)
np_reads_sag_spe_reordered_sub_no_unk = sag_spe_ordered_no_unk[which(sag_spe_ordered_no_unk$sag_id %in% common_sags), ]
np_reads_sag_spe_reordered_sub_no_unk = np_reads_sag_spe_reordered_sub_no_unk[match(matrix_sag_order, np_reads_sag_spe_reordered_sub_no_unk$sag_id), ]
np_row_color_no_unk = sapply(np_reads_sag_spe_reordered_sub_no_unk[, 2], get_all_color_auto_class)
np_row_color_legend_c_no_unk = unique(np_row_color_no_unk)
np_row_color_legend_n_no_unk = unique(np_reads_sag_spe_reordered_sub_no_unk[,2])
sag_spe_cnt = table(sub_sag_spe_ordered[,2])
final_species_with_hits = sag_spe_cnt[unique(sub_sag_spe_ordered[,2])]
legend_labels = paste(names(final_species_with_hits), " (", final_species_with_hits, ")", sep = "")
np_reads_sag_reads_colsorted_no_unk = np_reads_sag_reads_colsorted_no_unk[, -ncol(np_reads_sag_reads_colsorted_no_unk)]
pdf("fig2_1.pdf", height = 12, width = 8)
par(las=1, cex = 1.2, mar=c(2,5,2,20))
image(t(as.matrix(rev(1:length(np_row_color_legend_c_no_unk)))), col = np_row_color_legend_c_no_unk, xlab = "", xaxt = 'n', yaxt = 'n', bty = 'n')
axis(4, at=seq(0, 1, by = 1/10), labels=rev(legend_labels), tick = F)
dev.off()
col = brewer.pal(9, "Set1")[1:3]
heatmap_col = colorRampPalette(c("#F0F0F0", col[2]))(100)
pdf("fig2_2.pdf", height = 10, width = 12)
heatmap.2(as.matrix(np_reads_sag_reads_colsorted_no_unk),Rowv = F,Colv = F,col = heatmap_col,trace = "none", scale ="none",labCol = NULL,density.info = "none",main = "",dendrogram ="none",na.color = "white",key = F,cexRow = 0.25,cexCol= 1, RowSideColors = np_row_color_no_unk)
dev.off()
write.csv(np_reads_sag_spe_reordered_sub_no_unk, file="fig2_row_order_auto_classify.csv", row.names = F, quote = F)
pdf("fig2_3.pdf", height = 4, width = 9.4)
par(cex=1)
plot(colSums(np_reads_sag_reads_colsorted_no_unk), pch=20, type="l", col="black", bty = 'n', xlab = "", ylab = "", lwd = 2, xaxt = 'n', ylim = c(0, 200))
#axis(side = 2, at = c(0, 30, 60, 90, 120, 150, 180), labels = c(0, 30, 60, 90, 120, 150, 180))
title(xlab = "Viral Partition Number", line=0)
title(ylab = "# of SAGs", line = 2.2)
points(x = 1:ncol(np_reads_sag_reads_colsorted_no_unk), y=colSums(np_reads_sag_reads_colsorted_no_unk), type = "p", pch = 20)
dev.off()
options(stringsAsFactors = F)
library(reshape2)
library(gplots)
library(RColorBrewer)
library(data.table)
source("../../sag_toolbox.R")
sag_spe_raw = read.csv("../auto_classification_results manual_curate_C07_L21.txt", header = F)
sag_spe_raw = sag_spe_raw[which(sag_spe_raw[, 2] <= 2), ]
sag_name_changer = read.csv("../species_name_change_auto_classify.csv", header = F)
sag_spe_raw[, 3] = sapply(sag_spe_raw[, 3], function(x){
if(x %in% sag_name_changer[, 1]){
y = which(as.character(sag_name_changer[, 1]) == as.character(x))
return(sag_name_changer[y, 2])
}
else{
return(x)
}
})
colnames(sag_spe_raw) = c("SAG", "class", "Species.classification")
sag_spe = data.frame(sag_id = substr(sag_spe_raw$SAG, 8, 10), spe = sag_spe_raw$Species.classification)
roworder = as.character(read.table("../fig2_row_order_based_on_phylo.txt", header=F, sep=",")[, 1])
spe_ordered = ordered(sag_spe[, 2], levels = roworder)
sag_spe_ordered = sag_spe[order(spe_ordered), ]
sag_vp_inf_m = read.table("../matrix_infection.csv", header = T, sep = ",")
sag_vp_crispr_m = read.table("../matrix_crispr.csv", header = T, sep = ",")
#######
# sort columns
sortCols = function(data){
data[, order(colSums(data), decreasing = T)]
}
sortRows <- function(data){
order_string = paste("data[order(", paste(paste0("data[,", 1:ncol(data), "]"), collapse=","), ", decreasing = T), ]", collapse = "", sep = "")
data = eval(parse(text = order_string))
}
sortAllRows <- function(data_m, row_spe){
ordered_m = NULL
for(i in unique(row_spe[, 2])){
#print(i)
i_idx = which(row_spe[, 2] == i)
if(length(i_idx) > 1){
ordered_m = rbind(ordered_m, sortRows(data_m[i_idx, ]))
}else{
rname = rownames(ordered_m)
ordered_m = rbind(ordered_m, data_m[i_idx, ])
rownames(ordered_m) = c(rname, rownames(data_m)[i_idx])
}
}
return(ordered_m)
}
sortAllRows_order_by_heatmap_cnt <- function(data_m, row_spe){
ordered_m = NULL
for(i in names(sort(table(row_spe[,2]), decreasing=T))){
#print(i)
i_idx = which(row_spe[, 2] == i)
if(length(i_idx) > 1){
ordered_m = rbind(ordered_m, sortRows(data_m[i_idx, ]))
}else{
rname = rownames(ordered_m)
ordered_m = rbind(ordered_m, data_m[i_idx, ])
rownames(ordered_m) = c(rname, rownames(data_m)[i_idx])
}
}
return(ordered_m)
}
####################################### reads only #######################################
sag_vp_reads_m = sag_vp_inf_m
rownames(sag_vp_reads_m) = substr(sag_vp_reads_m[, 1], 8, 10)
sag_vp_reads_m = sag_vp_reads_m[, -1]
sag_vp_reads_m = ifelse(sag_vp_reads_m>0, 1, 0)
sag_vp_reads_m[is.na(sag_vp_reads_m)] = 0
sag_spe_ordered_sub_reads = sag_spe_ordered[which(sag_spe_ordered$sag_id %in% row.names(sag_vp_reads_m)),]
sag_vp_reads_m = sag_vp_reads_m[sag_spe_ordered_sub_reads$sag_id, ]
#write.csv(sag_spe_ordered_sub_reads, file="fig2_row_order_auto_classify.csv", row.names = F, quote = F)
#sag_spe_ordered_new_order = sag_spe_ordered
#sag_spe_ordered_sub_reads_new_order = sag_spe_ordered[which(sag_spe_ordered$sag_id %in% row.names(sag_vp_reads_m)), ]
#sag_vp_reads_m_new_order = sag_vp_reads_m[sag_spe_ordered_sub_reads_new_order$sag_id, ]
np_reads_sag_reads_colsorted = sortCols(sag_vp_reads_m)
colnames(np_reads_sag_reads_colsorted) = gsub("X", "", colnames(np_reads_sag_reads_colsorted))
sub_sag_spe_ordered = sag_spe_ordered[which(sag_spe_ordered[, 1] %in% rownames(np_reads_sag_reads_colsorted)), ]
np_reads_sag_reads_colsorted = sortAllRows(np_reads_sag_reads_colsorted, sub_sag_spe_ordered)
np_reads_sag_reads_colsorted_no_unk = np_reads_sag_reads_colsorted
sag_spe_ordered_no_unk = sag_spe_ordered[which(sag_spe_ordered$spe != "Unknown"), ]
matrix_sag_order = rownames(np_reads_sag_reads_colsorted_no_unk)
nature_order = sag_spe_ordered_no_unk[, 1]
common_sags = intersect(matrix_sag_order, nature_order)
leftout_sags = setdiff(nature_order, common_sags)
np_reads_sag_spe_reordered_sub_no_unk = sag_spe_ordered_no_unk[which(sag_spe_ordered_no_unk$sag_id %in% common_sags), ]
np_reads_sag_spe_reordered_sub_no_unk = np_reads_sag_spe_reordered_sub_no_unk[match(matrix_sag_order, np_reads_sag_spe_reordered_sub_no_unk$sag_id), ]
np_row_color_no_unk = sapply(np_reads_sag_spe_reordered_sub_no_unk[, 2], get_all_color_auto_class)
np_row_color_legend_c_no_unk = unique(np_row_color_no_unk)
np_row_color_legend_n_no_unk = unique(np_reads_sag_spe_reordered_sub_no_unk[,2])
sag_spe_cnt = table(sub_sag_spe_ordered[,2])
final_species_with_hits = sag_spe_cnt[unique(sub_sag_spe_ordered[,2])]
legend_labels = paste(names(final_species_with_hits), " (", final_species_with_hits, ")", sep = "")
np_reads_sag_reads_colsorted_no_unk = np_reads_sag_reads_colsorted_no_unk[, -ncol(np_reads_sag_reads_colsorted_no_unk)]
pdf("fig2_1.pdf", height = 12, width = 8)
par(las=1, cex = 1.2, mar=c(2,5,2,20))
image(t(as.matrix(rev(1:length(np_row_color_legend_c_no_unk)))), col = np_row_color_legend_c_no_unk, xlab = "", xaxt = 'n', yaxt = 'n', bty = 'n')
axis(4, at=seq(0, 1, by = 1/10), labels=rev(legend_labels), tick = F)
dev.off()
col = brewer.pal(9, "Set1")[1:3]
heatmap_col = colorRampPalette(c("#F0F0F0", col[2]))(100)
pdf("fig2_2.pdf", height = 10, width = 12)
heatmap.2(as.matrix(np_reads_sag_reads_colsorted_no_unk),Rowv = F,Colv = F,col = heatmap_col,trace = "none", scale ="none",labCol = NULL,density.info = "none",main = "",dendrogram ="none",na.color = "white",key = F,cexRow = 0.25,cexCol= 1, RowSideColors = np_row_color_no_unk)
dev.off()
write.csv(np_reads_sag_spe_reordered_sub_no_unk, file="fig2_row_order_auto_classify.csv", row.names = F, quote = F)
pdf("fig2_3.pdf", height = 4, width = 9.4)
par(cex=1)
plot(colSums(np_reads_sag_reads_colsorted_no_unk), pch=20, type="l", col="black", bty = 'n', xlab = "", ylab = "", lwd = 2, xaxt = 'n', ylim = c(0, 200))
#axis(side = 2, at = c(0, 30, 60, 90, 120, 150, 180), labels = c(0, 30, 60, 90, 120, 150, 180))
title(xlab = "Viral Partition Number", line=0)
title(ylab = "# of SAGs", line = 2.2)
points(x = 1:ncol(np_reads_sag_reads_colsorted_no_unk), y=colSums(np_reads_sag_reads_colsorted_no_unk), type = "p", pch = 20)
dev.off()
setwd("~/Dropbox (Weitz Group)/SAG_related/new_working_area/fig/fig1")
options(stringsAsFactors = F)
library(gplots)
library(grDevices)
library(devtools)
source_url("https://raw.githubusercontent.com/obigriffith/biostar-tutorials/master/Heatmaps/heatmap.3.R")
source("../../sag_toolbox.R")
mat_ani = read.csv("../ani_matrix_by_perl_mod1.csv", check.names = F)
mat_bpc = read.csv("../bpc_matrix_by_perl_mod1.csv", check.names = F)
new_spe_name = read.csv("../Reference_genomes_per_species.csv", header = T)
classification_file = read.csv("../auto_classification_results manual_curate_C07_L21.txt", header = F)
name_change_table = read.csv("../species_name_change_auto_classify.csv", header = F)
classification_file_filter12 = classification_file[which(classification_file[, 2] <= 2), ]
classification_file_filter12[, ncol(classification_file_filter12)+1] = substr(classification_file_filter12[, 1], 8, 10)
colnames(classification_file_filter12) = c("sag_full", "class", "spe", "sagid")
mat_ani_bin = mat_ani[, -1]
row.names(mat_ani_bin) = gsub("AD_903_", "", mat_ani[, 1])
mat_ani_bin[is.na(mat_ani_bin)] = 0
mat_ani_bin = mat_ani_bin/100
mat_ani_bin_idx = ifelse(mat_ani_bin >= 0.7, 1, 0)
mat_ani_bin_70_only = mat_ani_bin * mat_ani_bin_idx
mat_ani_bin_filtered = mat_ani_bin_70_only[classification_file_filter12$sagid, ]
col_order = c("Escherichia_coli_str._K-12_substr._MDS42_DNA","Hydrogenobaculum_sp._3684_complete_genome","Metallosphaera_yellowstonensis_MK1","AC-742_N10","Acidianus_hospitalis_W1_complete_genome","Sulfolobus_islandicus_HVE10_4_chromosome_complete_genome","Sulfolobus_solfataricus_P2_complete_genome","AB-777_J04","A_nanophilium","AB-777_K09","AB-777_K20","AB-777_J03","Sulfolobus_tokodaii_str._7_chromosome_complete_genome","Sulfolobus_acidocaldarius_DSM_639_chromosome_complete_genome","AB-777_G06","AB-777_G05","AB-777_L09","Ignicoccus_hospitalis_KIN4_I_complete_genome","AC-742_M05","AC-742_E15","Acidilobus_saccharovorans_345-15","Acidilobus_sp._7A_complete_genome","Acidilobus_sulfurireducans","Thermoproteus_tenax_Kra_1","AB-777_J10","Vulcanisaeta_distributa_DSM_14429_complete_genome","Vulcanisaeta_moutnovskia_768-28_complete_genome","Nanoarchaeum_equitans","Nanoarchaeota_archaeon_7A_complete_genome","N._stetteri","AB-777_F03_Nanoarchaea_sequences","AB-777_O03")
mat_ani_bin_filtered_col_ordered = mat_ani_bin_filtered[, col_order]
sag_class = classification_file_filter12[, c(4, 2)]
#sag_class_color = t(as.matrix(ifelse(sag_class[, 2] == 1, "#33cc33", "#006600")))
sag_class_color = t(as.matrix(ifelse(sag_class[, 2] == 1, "#cccccc", "#000000")))
sag_class_spe = classification_file_filter12[, c(3, 2)]
sag_class_spe[, 1] = sapply(sag_class_spe[, 1], function(x){
if(x %in% name_change_table[, 1]){
y = which(as.character(name_change_table[, 1]) == as.character(x))
return(name_change_table[y, 2])
}
else{
return(x)
}
})
sag_class_spe_color = sapply(sag_class_spe[, 1], get_all_color_auto_class)
rowsidebar = rbind(sag_class_color, sag_class_spe_color)
rownames(rowsidebar) = c("Class", "Species")
col_order_rename = new_spe_name[match(col_order, new_spe_name[, 1]), 1]
col_order_rename_spe = new_spe_name[match(col_order, new_spe_name[, 1]), 2]
colnames(mat_ani_bin_filtered_col_ordered) = col_order_rename
mat_ani_bin_filtered_col_ordered_spe = mat_ani_bin_filtered_col_ordered
colnames(mat_ani_bin_filtered_col_ordered_spe) = col_order_rename_spe
#myc = colorRampPalette(c(rep("white", 4), "orange", rep("red",1)) )(100)
#myc = c(rep("#FFFFFF", 70), colorRampPalette(c("white", "yellow", "orange", "red", "darkred"))(30))
#myc = c(rep("#FFFFFF", 70), colorRampPalette(c("#ffff00", "#ff9900", "#cc6600", "#ff3300", "#ff0000", "#cc0000"))(30))
myc = c(rep("#FFFFFF", 70), colorRampPalette(c("#ffff00", "#ff9900", "#ff6600", "#ff0000", "#cc0000"))(30))
mydist=function(c) {dist(c,method="euclidian")}
myclust=function(c) {hclust(c,method="average")}
pdf("heatmap_based_on_ani_with_class.pdf", width = 8, height = 10)
#par(cex.main=1)
heatmap.3(as.matrix(mat_ani_bin_filtered_col_ordered),
hclustfun = myclust,
distfun = mydist,
scale = "none",
trace = "none",
na.color = "white",
col = myc,
dendrogram = "row",
margins = c(6,12),
Rowv = TRUE,
Colv = FALSE,
RowSideColors = rowsidebar,
symbreaks = FALSE,
key = TRUE,
symkey = FALSE,
density.info = "none",
main = "",
labRow = FALSE,
#ColSideColorsSize = 7,
RowSideColorsSize = nrow(rowsidebar),
KeyValueName="ANI"
# key.xtickfun = function() {
#   breaks = seq(0, 1, length = 11)
#   list(at = parent.frame()$scale01(breaks),
#        labels = breaks)}
)
legend("topright",legend=c("Class 1", "Class 2", "Acidocryptum nanophilium", "Acidilobus sp", "Vulcanisaeta sp", "Sulfolobus sp 2", "Sulfolobus sp 1", "Acidianus hospitalis", "Hydrogenobaculum sp", "Nanoarchaea", "Nanoarchaea & Acidocryptum nanophilium", "Nanoarchaea & Sulfolobus sp 1", "Nanoarchaea & Vulcanisaeta sp", "Nanoarchaea & Sulfolobus sp 2"),
fill=c("#cccccc", "#000000", "#a6cee3", "#1f78b4", "#b2df8a", "#33a02c", "#fb9a99", "#e31a1c", "#fdbf6f", "#ff7f00", "#cab2d6", "#6a3d9a", "#ffff99", "#b15928"), border=FALSE, bty="n", y.intersp = 0.7, cex=0.7)
dev.off()
pdf("heatmap_based_on_ani_with_class_spe.pdf", width = 8, height = 10)
#par(cex.main=1)
heatmap.3(as.matrix(mat_ani_bin_filtered_col_ordered_spe),
hclustfun = myclust,
distfun = mydist,
scale = "none",
trace = "none",
na.color = "white",
col = myc,
dendrogram = "row",
margins = c(6,12),
Rowv = TRUE,
Colv = FALSE,
RowSideColors = rowsidebar,
symbreaks = FALSE,
key = TRUE,
symkey = FALSE,
density.info = "none",
main = "",
labRow = FALSE,
#ColSideColorsSize = 7,
RowSideColorsSize = nrow(rowsidebar),
KeyValueName="ANI"
# key.xtickfun = function() {
#   breaks = seq(0, 1, length = 11)
#   list(at = parent.frame()$scale01(breaks),
#        labels = breaks)}
)
legend("topright",legend=c("Class 1", "Class 2", "Acidocryptum nanophilium", "Acidilobus sp", "Vulcanisaeta sp", "Sulfolobus sp 2", "Sulfolobus sp 1", "Acidianus hospitalis", "Hydrogenobaculum sp", "Nanoarchaea", "Nanoarchaea & Acidocryptum nanophilium", "Nanoarchaea & Sulfolobus sp 1", "Nanoarchaea & Vulcanisaeta sp", "Nanoarchaea & Sulfolobus sp 2"),
fill=c("#cccccc", "#000000", "#a6cee3", "#1f78b4", "#b2df8a", "#33a02c", "#fb9a99", "#e31a1c", "#fdbf6f", "#ff7f00", "#cab2d6", "#6a3d9a", "#ffff99", "#b15928"), border=FALSE, bty="n", y.intersp = 0.7, cex=0.7)
dev.off()
#heatmap.2(as.matrix(mat_ani_bin_filtered_col_ordered), trace = "none", scale = "none", density.info = "none", cexRow = 0.25, na.color = "white", col = myc, Colv = F, dendrogram = "row")
# temp = heatmap.2(as.matrix(mat_ani_bin_filtered), trace = "none", scale = "none", density.info = "none", cexRow = 0.25, na.color = "white", col = myc)
# mat_ani_bin_filtered_reordered = mat_ani_bin_filtered[rev(temp$rowInd), temp$colInd]
#
# write.csv(mat_ani_bin_filtered_reordered, file = "reordered_perl_ani_2way_dendrogram_matrix.csv", quote = F)
setwd("~/Dropbox (Weitz Group)/SAG_related/new_working_area/fig/fig2")
options(stringsAsFactors = F)
library(reshape2)
library(gplots)
library(RColorBrewer)
library(data.table)
source("../../sag_toolbox.R")
sag_spe_raw = read.csv("../auto_classification_results manual_curate_C07_L21.txt", header = F)
sag_spe_raw = sag_spe_raw[which(sag_spe_raw[, 2] <= 2), ]
sag_name_changer = read.csv("../species_name_change_auto_classify.csv", header = F)
sag_spe_raw[, 3] = sapply(sag_spe_raw[, 3], function(x){
if(x %in% sag_name_changer[, 1]){
y = which(as.character(sag_name_changer[, 1]) == as.character(x))
return(sag_name_changer[y, 2])
}
else{
return(x)
}
})
colnames(sag_spe_raw) = c("SAG", "class", "Species.classification")
sag_spe = data.frame(sag_id = substr(sag_spe_raw$SAG, 8, 10), spe = sag_spe_raw$Species.classification)
roworder = as.character(read.table("../fig2_row_order_based_on_phylo.txt", header=F, sep=",")[, 1])
spe_ordered = ordered(sag_spe[, 2], levels = roworder)
sag_spe_ordered = sag_spe[order(spe_ordered), ]
sag_vp_inf_m = read.table("../matrix_infection.csv", header = T, sep = ",")
sag_vp_crispr_m = read.table("../matrix_crispr.csv", header = T, sep = ",")
#######
# sort columns
sortCols = function(data){
data[, order(colSums(data), decreasing = T)]
}
sortRows <- function(data){
order_string = paste("data[order(", paste(paste0("data[,", 1:ncol(data), "]"), collapse=","), ", decreasing = T), ]", collapse = "", sep = "")
data = eval(parse(text = order_string))
}
sortAllRows <- function(data_m, row_spe){
ordered_m = NULL
for(i in unique(row_spe[, 2])){
#print(i)
i_idx = which(row_spe[, 2] == i)
if(length(i_idx) > 1){
ordered_m = rbind(ordered_m, sortRows(data_m[i_idx, ]))
}else{
rname = rownames(ordered_m)
ordered_m = rbind(ordered_m, data_m[i_idx, ])
rownames(ordered_m) = c(rname, rownames(data_m)[i_idx])
}
}
return(ordered_m)
}
sortAllRows_order_by_heatmap_cnt <- function(data_m, row_spe){
ordered_m = NULL
for(i in names(sort(table(row_spe[,2]), decreasing=T))){
#print(i)
i_idx = which(row_spe[, 2] == i)
if(length(i_idx) > 1){
ordered_m = rbind(ordered_m, sortRows(data_m[i_idx, ]))
}else{
rname = rownames(ordered_m)
ordered_m = rbind(ordered_m, data_m[i_idx, ])
rownames(ordered_m) = c(rname, rownames(data_m)[i_idx])
}
}
return(ordered_m)
}
####################################### reads only #######################################
sag_vp_reads_m = sag_vp_inf_m
rownames(sag_vp_reads_m) = substr(sag_vp_reads_m[, 1], 8, 10)
sag_vp_reads_m = sag_vp_reads_m[, -1]
sag_vp_reads_m = ifelse(sag_vp_reads_m>0, 1, 0)
sag_vp_reads_m[is.na(sag_vp_reads_m)] = 0
sag_spe_ordered_sub_reads = sag_spe_ordered[which(sag_spe_ordered$sag_id %in% row.names(sag_vp_reads_m)),]
sag_vp_reads_m = sag_vp_reads_m[sag_spe_ordered_sub_reads$sag_id, ]
#write.csv(sag_spe_ordered_sub_reads, file="fig2_row_order_auto_classify.csv", row.names = F, quote = F)
#sag_spe_ordered_new_order = sag_spe_ordered
#sag_spe_ordered_sub_reads_new_order = sag_spe_ordered[which(sag_spe_ordered$sag_id %in% row.names(sag_vp_reads_m)), ]
#sag_vp_reads_m_new_order = sag_vp_reads_m[sag_spe_ordered_sub_reads_new_order$sag_id, ]
np_reads_sag_reads_colsorted = sortCols(sag_vp_reads_m)
colnames(np_reads_sag_reads_colsorted) = gsub("X", "", colnames(np_reads_sag_reads_colsorted))
sub_sag_spe_ordered = sag_spe_ordered[which(sag_spe_ordered[, 1] %in% rownames(np_reads_sag_reads_colsorted)), ]
np_reads_sag_reads_colsorted = sortAllRows(np_reads_sag_reads_colsorted, sub_sag_spe_ordered)
np_reads_sag_reads_colsorted_no_unk = np_reads_sag_reads_colsorted
sag_spe_ordered_no_unk = sag_spe_ordered[which(sag_spe_ordered$spe != "Unknown"), ]
matrix_sag_order = rownames(np_reads_sag_reads_colsorted_no_unk)
nature_order = sag_spe_ordered_no_unk[, 1]
common_sags = intersect(matrix_sag_order, nature_order)
leftout_sags = setdiff(nature_order, common_sags)
np_reads_sag_spe_reordered_sub_no_unk = sag_spe_ordered_no_unk[which(sag_spe_ordered_no_unk$sag_id %in% common_sags), ]
np_reads_sag_spe_reordered_sub_no_unk = np_reads_sag_spe_reordered_sub_no_unk[match(matrix_sag_order, np_reads_sag_spe_reordered_sub_no_unk$sag_id), ]
np_row_color_no_unk = sapply(np_reads_sag_spe_reordered_sub_no_unk[, 2], get_all_color_auto_class)
np_row_color_legend_c_no_unk = unique(np_row_color_no_unk)
np_row_color_legend_n_no_unk = unique(np_reads_sag_spe_reordered_sub_no_unk[,2])
sag_spe_cnt = table(sub_sag_spe_ordered[,2])
final_species_with_hits = sag_spe_cnt[unique(sub_sag_spe_ordered[,2])]
legend_labels = paste(names(final_species_with_hits), " (", final_species_with_hits, ")", sep = "")
np_reads_sag_reads_colsorted_no_unk = np_reads_sag_reads_colsorted_no_unk[, -ncol(np_reads_sag_reads_colsorted_no_unk)]
pdf("fig2_1.pdf", height = 12, width = 8)
par(las=1, cex = 1.2, mar=c(2,5,2,20))
image(t(as.matrix(rev(1:length(np_row_color_legend_c_no_unk)))), col = np_row_color_legend_c_no_unk, xlab = "", xaxt = 'n', yaxt = 'n', bty = 'n')
axis(4, at=seq(0, 1, by = 1/10), labels=rev(legend_labels), tick = F)
dev.off()
col = brewer.pal(9, "Set1")[1:3]
heatmap_col = colorRampPalette(c("#F0F0F0", col[2]))(100)
pdf("fig2_2.pdf", height = 10, width = 12)
heatmap.2(as.matrix(np_reads_sag_reads_colsorted_no_unk),Rowv = F,Colv = F,col = heatmap_col,trace = "none", scale ="none",labCol = NULL,density.info = "none",main = "",dendrogram ="none",na.color = "white",key = F,cexRow = 0.25,cexCol= 1, RowSideColors = np_row_color_no_unk)
dev.off()
write.csv(np_reads_sag_spe_reordered_sub_no_unk, file="fig2_row_order_auto_classify.csv", row.names = F, quote = F)
pdf("fig2_3.pdf", height = 4, width = 9.4)
par(cex=1)
plot(colSums(np_reads_sag_reads_colsorted_no_unk), pch=20, type="l", col="black", bty = 'n', xlab = "", ylab = "", lwd = 2, xaxt = 'n', ylim = c(0, 200))
#axis(side = 2, at = c(0, 30, 60, 90, 120, 150, 180), labels = c(0, 30, 60, 90, 120, 150, 180))
title(xlab = "Viral Partition Number", line=0)
title(ylab = "# of SAGs", line = 2.2)
points(x = 1:ncol(np_reads_sag_reads_colsorted_no_unk), y=colSums(np_reads_sag_reads_colsorted_no_unk), type = "p", pch = 20)
dev.off()
pdf("fig2_2.pdf", height = 10, width = 12)
heatmap.2(as.matrix(np_reads_sag_reads_colsorted_no_unk),Rowv = F,Colv = F,col = heatmap_col,trace = "none", scale ="none",labCol = NULL,density.info = "none",main = "",dendrogram ="none",na.color = "white",key = F,cexRow = 0.25,cexCol= 1, RowSideColors = np_row_color_no_unk, labRow = F)
dev.off()
image(t(as.matrix(rev(1:length(np_row_color_legend_c_no_unk)))), col = np_row_color_legend_c_no_unk, xlab = "", xaxt = 'n', yaxt = 'n', bty = 'n')
legend_labels
pdf("fig2_3.pdf", height = 4, width = 9.4)
par(cex=1)
plot(colSums(np_reads_sag_reads_colsorted_no_unk), pch=20, type="l", col="black", bty = 'n', xlab = "", ylab = "", lwd = 2, xaxt = 'n', ylim = c(0, 200))
axis(side = 2, at = c(0, 30, 60, 90, 120, 150, 180), labels = c(0, 30, 60, 90, 120, 150, 180))
title(xlab = "Viral Partition Number", line=0)
title(ylab = "# of SAGs", line = 2.2)
points(x = 1:ncol(np_reads_sag_reads_colsorted_no_unk), y=colSums(np_reads_sag_reads_colsorted_no_unk), type = "p", pch = 20)
dev.off()
pdf("fig2_3.pdf", height = 4, width = 9.4)
par(cex=1)
plot(colSums(np_reads_sag_reads_colsorted_no_unk), pch=20, type="l", col="black", bty = 'n', xlab = "", ylab = "", lwd = 2, xaxt = 'n', ylim = c(0, 150))
#axis(side = 2, at = c(0, 30, 60, 90, 120, 150, 180), labels = c(0, 30, 60, 90, 120, 150, 180))
title(xlab = "Viral Partition Number", line=0)
title(ylab = "# of SAGs", line = 2.2)
points(x = 1:ncol(np_reads_sag_reads_colsorted_no_unk), y=colSums(np_reads_sag_reads_colsorted_no_unk), type = "p", pch = 20)
dev.off()
setwd("~/Dropbox (Weitz Group)/SAG_related/new_working_area/auto_classify")
options(stringsAsFactors = F)
overlap_info = read.csv("all_overlap_numbers.txt", header = F)
View(overlap_info)
View(overlap_info)
options(stringsAsFactors = F)
overlap_info = read.csv("all_overlap_numbers.txt", header = F)
overlap_info[, ncol(overlap_info) + 1] = overlap_info[, 3]/overlap_info[, 1]
overlap_info[, ncol(overlap_info) + 1] = overlap_info[, 3]/overlap_info[, 2]
View(overlap_info)
higher_percent = sapply(overlap_info, function(x){if(x[4] < x[5]){return(x[5])}else{return(x[4])}})
higher_percent
dim(overlap_info)
higher_percent = sapply(t(overlap_info), function(x){if(x[4] < x[5]){return(x[5])}else{return(x[4])}})
dim(t(overlap_info))
View(t(overlap_info))
sapply(t(overlap_info), function(x){print(x)})
apply(overlap_info, 1, function(x){print(x)})
apply(overlap_info, 1, function(x){print(x[4])})
higher_percent = apply(overlap_info, 1, function(x){x[4]})
higher_percent
higher_percent = apply(overlap_info, 1, function(x){if(x[4] < x[5]){return(x[5])}else{return(x[4])}})
higher_percent
hist(higher_percent)
hist(higher_percent)
all_percent = c(overlap_info[, 4], overlap_info[, 5])
hist(all_percent)
hist(all_percent, breaks = 20)
hist(all_percent, breaks = 40)
hist(higher_percent, breaks = 20)
hist(higher_percent, breaks = 15)
hist(higher_percent, breaks = 40)
hist(higher_percent, breaks = 20)
all_percent = c(overlap_info[, 4], overlap_info[, 5])
png("overlap_percent_hist.png")
hist(all_percent, breaks = 40)
dev.off()
higher_percent = apply(overlap_info, 1, function(x){if(x[4] < x[5]){return(x[5])}else{return(x[4])}})
png("overlap_percent_hist.png")
hist(higher_percent, breaks = 20)
dev.off()
View(overlap_info)
total_per = overlap_info[, 3]/(overlap_info[, 1] + overlap_info[, 2])
hist(total_per, breaks = 20)
total_per = overlap_info[, 3]/(overlap_info[, 1] + overlap_info[, 2] - overlap_info[, 3])
hist(total_per, breaks = 20)
?write.delim
?write.table
?apply
